=head1 NAME

pipicpowerd -  monitor and control Raspberry Pi power supply with i2c

=head1 SYNOPSIS

B<pipicpowerd> 

=head1 DESCRIPTION

The B<pipicpowerd> is used to monitor and control Raspberry Pi power supply
with i2c bus. Initially the power is applied to the Raspberry Pi by pushing
the red button on the power supply. The daemon is started with command

B<service> I<pipicpowerd> I<start>

and can be stopped any time with

B<service> I<pipicpowerd> I<stop>

The operation of the daemon can be checked from the log file.
At the start four test bytes are written to the power supply and read back.
If this data flow test fails the daemon exits. One reason for this
failure could be that the internal counter of PIC was not yet reset with
command B<pipic> B<-a> 26 B<-c> 50.
Otherwise the event triggered tasks on the PIC are disabled and the 
internal timer is read. If the file I</var/lib/pipicpowerd/pwrup> exists
the PIC internal timer is used to estimate time now and the system time is
set accordingly.

In the main
loop the battery voltage is read at predetermined intervals. During the 
reading the red LED on the power supply is turned on. If the battery
voltage is too low the power supply is programmed to a delayed power down and 
the shutdown(8) command is called to put the Raspberry Pi into a halt state.
Note that high value read from PIC means low battery voltage because of
the inverting transistor circuit.

The event register from the PIC is read at programmed intervals to see if
the power button has been pressed. If this is the case the red LED is turned
on and if the button is pressed again the shut down and delayed power down is 
initiated. If the file I</var/lib/pipicpowerd/wakeup> exists the PIC is 
programmed to wake up later in future at the given time. The time delay
depends on how accurately the PIC internal counter cycle length is known.
This can be determined for example with command 
B<pipictest> B<-a> 26 B<-c> B<-n> 10000. 

The shut down and power down can be initiated by sending HUP signal to 
the daemon with B<kill> B<-s> I<SIGHUP>. 
The file I</var/lib/pipicpowerd/pwrdown> has to exists for HUP signal power
down to be executed.

=head1 FILES

I</etc/logrotate.d/pipicpowerd>    Log rotation configuration file.

I</etc/init.d/pipicpowerd>         Init script.

I</etc/pipicpowerd_config>         Configuration file.

I</usr/sbin/pipicpowerd>           Daemon code.

I</var/lib/pipicpowerd/battery>    Most recent battery value 1023-0. 

I</var/lib/pipicpowerd/battlevel>  Battery level 0 - 100 %.

I</var/lib/pipicpowerd/hoursleft>  Hours left before battery flat. 

I</var/lib/pipicpowerd/ophours>    Operation hours before MINBATTLEVEL reached. 

 
I</var/lib/pipicpowerd/pwrdown>    If this file exists power down with SIGINT.
 
I</var/lib/pipicpowerd/pwrup>      If this file exists approximative system time is set at power up.

I</var/lib/pipicpowerd/resetime>   Time of last PIC timer reset hh:mm. 

I</var/lib/pipicpowerd/sleeptime>  If this file exists and has hh:mm, this time is used to start system shutdown and power down.

I</var/lib/pipicpowerd/volts>      Most recent battery voltage. 
 
I</var/lib/pipicpowerd/waketime>   Estimated time from PIC counter at boot.

I</var/lib/pipicpowerd/wakeup>     Next wakeup time hh:mm.
 
I</var/log/pipicpowerd.log>        Log file.

I</var/run/pipicpowerd.pid>        PID file.

The configuration file can have following parameters.

I<BATTCAP>
Nominal battery capacity in Ampere-hours.

I<BUTTONINT>
Push button reading interval in seconds. When the daemon is running the
push button can be used to initiate system shutdown and power down.

I<CONFDELAY>
The system shutdown and power down needs to be confirmed by a second button
press. This is the waiting time in seconds for confirmation button press.

I<COUNTINT>
Read PIC internal timer at given intervals in seconds. 

I<CURRENT>
Estimated average discharge current in Amperes.

I<FORCEPOWEROFF>
Force power off after given PIC counter cycles. This can be used as a 
hardware watchdog for RPi power. If set to zero the value is ignored. 
Using this option will lead to data loss and might lead to data corruption
on the SD card too.

I<FORCEPOWERUP>
Force power up after given PIC counter cycles. This can be used as a 
hardware watchdog to wake up after forced power off. If set to zero this 
value is ignored.

I<FORCERESET>
If set force reset of PIC counter if initial i2c dataflow test fails. The PIC
counter needs to be reset after power cycling of the PIC. 

I<LOGLEVEL>
Log level 0=debug messages, 1=system commands, 2=operation messages, 
3=status messages and 4=errors/warnings.

I<LOWBATTERY> 
Low battery voltage level 0 - 1023. Due to the inverting transistor 
circuit from battery to AN3 high value means low voltage at battery.
Reaching this level will initiate automatic shutdown.

I<MAXBATTVOLTS>
Maximum battery voltage during charging. Higher voltage than this could
damage the battery is applied for long time.

I<MINBATTLEVEL>
Minimum operating charge level for battery. This should be more than 50 %
for longer battery life and ideally 70 % could be used. User is warned when
this level is reached and automatic shutdown in five minutes followed by
power down is started. During this period no new logins are allowed. 
The system can wake up automatically in future if file 
/var/lib/pipicpowerd/wakeup exists. The shutdown(8) could be canceled
manually if needed.

I<PICYCLE> 
PIC internal timer cycle period in seconds. Needed to estimate number of
PIC counter cycles to wake up the Raspberry Pi again. This can checked with
command 'pipictest -a 26 -c -n 10000'. 

I<PWRDOWN> 
After system shutdown wait given PIC counter cycles before power is switched
off.

I<SETTIME>
If set the current time is estimated from PIC counter cycles at boot time
and the system time is set accordingly.

I<VDROP>
Voltage drop from battery to power supply in Volts

I<VOLTCAL>
Battery voltage calibration constant U=VOLTCAL*(1023-AN3).

I<VOLTINT>
Battery voltage reading interval in seconds.

I<VOLTTEMPA> I<VOLTTEMPB> I<VOLTTEMPC>    
Temperature dependent battery voltage calibration constants with non-linear
model VOLTCAL=VOLTTEMPA*T^2+VOLTTEMPB*T+VOLTTEMPC. These are for outdoor use 
and at room temperature 20 - 25 C it is better to use I<VOLTCAL> only.

=head1 WARNING

No check is done where the query data is written. Could make some hardware 
unusable.

=head1 BUGS

The i2c clock needs to be low 10 - 20 kHz for the PIC12F675 used with this 
daemon. The clock can be set in I</etc/modprobe.d/i2c.conf> with line
I<options i2c_bcm2708 baudrate=20000>. 

=head1 AUTHORS

Jaakko Koivuniemi 

=head1 SEE ALSO

pipic(1), pipicfile(1), pipictest(1), i2cdetect(8), i2cset(8), i2cget(8)

